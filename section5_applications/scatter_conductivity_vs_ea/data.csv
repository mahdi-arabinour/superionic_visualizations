<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>EA vs Conductivity — fits your column names</title>
<script src="https://d3js.org/d3.v7.min.js"></script>
<style>
  :root { --panel-w: 280px; }
  body { font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial; background:#f8fafc; margin:16px; color:#0f172a; }
  h2 { margin: 4px 0 10px; font-size: 22px; letter-spacing: .2px; }
  .toolbar { display:flex; flex-wrap: wrap; gap:10px; align-items:center; margin-bottom: 10px; }
  .pill { display:inline-flex; align-items:center; gap:8px; padding:6px 10px; background:#fff; border:1px solid #e5e7eb; border-radius:999px; font-size:12px; }
  .btn { font-size:12px; padding:6px 10px; border-radius:999px; border:1px solid #e5e7eb; background:#fff; cursor:pointer; }
  .btn:hover { background:#f1f5f9; }
  .wrap { display:grid; grid-template-columns: 1fr var(--panel-w); gap:16px; align-items: start; }
  .viz { background:#fff; border:1px solid #e5e7eb; border-radius:12px; box-shadow:0 1px 2px rgba(0,0,0,.04); }
  .axis path, .axis line { stroke:#94a3b8; }
  .axis text { fill:#475569; font-size:12px; }
  .grid line { stroke:#e2e8f0; }
  .tooltip { position:fixed; pointer-events:none; background:#ffffff; border:1px solid #e5e7eb; border-radius:8px; padding:8px 10px; font-size:12px; color:#111827; box-shadow: 0 8px 16px rgba(0,0,0,.08); }
  .empty { text-anchor:middle; fill:#64748b; font-size:14px; }
  .sidepanels { position:sticky; top:8px; display:flex; flex-direction:column; gap:12px; }
  .panel { background:#fff; border:1px solid #e5e7eb; border-radius:12px; padding:10px 12px; }
  .panel h3 { font-size:13px; margin:0 0 8px; text-align:center; color:#0f172a; }
  .legend-item { display:flex; align-items:center; gap:8px; font-size:12px; margin:4px 0; cursor:pointer; user-select:none; }
  .legend-item.disabled { opacity: .35; text-decoration: line-through; }
  .legend-symbol { width:18px; height:18px; flex:0 0 18px; }
  .controls { display:flex; gap:6px; justify-content:space-between; margin-bottom:6px; }
  .controls button { font-size:11px; padding:4px 6px; border-radius:6px; border:1px solid #cbd5e1; background:#f8fafc; cursor:pointer; }
  .controls button:hover { background:#eef2f7; }
  .foot { margin-top:6px; color:#64748b; font-size:12px; }
  @media (max-width: 980px) { :root { --panel-w: 100%; } .wrap { grid-template-columns: 1fr; } }
</style>
</head>
<body>

<h2>Scatter Plot — Activation Energy vs Conductivity</h2>
<div class="toolbar">
  <span class="pill"><input type="checkbox" id="eaFilter" checked> Show only Ea ≤ 1 eV</span>
  <button class="btn" id="resetAll">Reset filters</button>
  <span id="status" style="font-size:12px;color:#64748b;"></span>
</div>

<div class="wrap">
  <svg class="viz" width="920" height="580" role="img" aria-labelledby="title desc">
    <title id="title">Scatter of activation energy vs conductivity</title>
    <desc id="desc">Y is log10(σ). Color encodes structure group; symbol encodes ion type.</desc>
  </svg>

  <div class="sidepanels">
    <div class="panel" id="colorLegend">
      <div class="controls">
        <button id="colorAll">Show all</button>
        <button id="colorNone">Hide all</button>
      </div>
      <h3>Structure Group (Color)</h3>
      <div id="colorItems"></div>
    </div>

    <div class="panel" id="shapeLegend">
      <div class="controls">
        <button id="shapeAll">Show all</button>
        <button id="shapeNone">Hide all</button>
      </div>
      <h3>Ion Type (Shape)</h3>
      <div id="shapeItems"></div>
    </div>
    <div class="foot" id="footnote"></div>
  </div>
</div>

<script>
const CSV_FILE = "data.csv";

// Exact column names you said you have:
const COL = {
  formula: "Formula (Chemical)",
  ion: "Ion Type",
  sigmaTemp: "Conductivity σ (S·cm⁻¹) / Temp (°C) normalized",
  struct: "Structure Group",
  ea: "Activation Energy Ea (eV)"
};

const toAsciiPlus = s => s.replace(/⁺/g, "+").replace(/\s+/g, " ").trim();
const normLabel = s => (!s ? "" : toAsciiPlus(String(s)).replace(/\u00A0/g, " ").trim());

// Flexible numeric parser
function parseNumberFlexible(v) {
  if (v == null) return NaN;
  let s = String(v).trim();
  if (!s) return NaN;
  s = s.replace(/,/g, "");
  s = s.replace(/⁻/g, "-").replace(/–/g, "-");
  s = s.replace(/×\s*10\^?\s*([-+]?\d+)/i, (m, p1) => "e" + p1);
  s = s.replace(/x\s*10\^?\s*([-+]?\d+)/i, (m, p1) => "e" + p1);
  s = s.replace(/10\^([⁰¹²³⁴⁵⁶⁷⁸⁹]+)/, (m, sup) => {
    const map = {"⁰":"0","¹":"1","²":"2","³":"3","⁴":"4","⁵":"5","⁶":"6","⁷":"7","⁸":"8","⁹":"9"};
    return "10^" + sup.split("").map(ch => map[ch] ?? ch).join("");
  }).replace(/10\^([-+]?\d+)/, (m,p1)=>"e"+p1);
  const n = Number(s);
  return Number.isFinite(n) ? n : NaN;
}

// Parse "Conductivity σ (S·cm⁻¹) / Temp (°C) normalized"
// Accept patterns like "1.2e-3 @ 25°C", "1e-4 (25C)", "3.4e-5 @ RT", "5e-4 @ 60°C; 2e-4 @ 25°C"
// Strategy: split by separators, pick the entry whose temp is closest to 25°C; if no temp, take the first numeric.
function pickSigmaAtRT(cell) {
  if (cell == null) return {sigma: NaN, temp: NaN, raw: ""};
  const raw = String(cell);
  const parts = raw.split(/[;,|]/).map(s => s.trim()).filter(Boolean);
  let best = {sigma: NaN, temp: NaN, raw: ""};
  let bestScore = Infinity;

  function extractOne(s) {
    const sigMatch = s.match(/[-+]?[\d.,]*\d(?:\.\d+)?(?:e[-+]?\d+)?/i);
    const tempMatch = s.match(/(-?\d+(?:\.\d+)?)\s*°?\s*c/i) || (/\bRT\b/i.test(s) ? {1:"25"} : null);
    const sigma = sigMatch ? parseNumberFlexible(sigMatch[0]) : NaN;
    const temp  = tempMatch ? parseFloat(tempMatch[1]) : NaN;
    return {sigma, temp, raw:s};
  }

  if (parts.length === 0) {
    return extractOne(raw);
  }

  for (const p of parts) {
    const it = extractOne(p);
    if (!Number.isFinite(it.sigma) || it.sigma <= 0) continue;
    const t = Number.isFinite(it.temp) ? it.temp : 25; // assume 25 if unspecified
    const score = Math.abs(t - 25);
    if (score < bestScore) { best = it; bestScore = score; }
  }
  if (!Number.isFinite(best.sigma)) {
    // fall back: first numeric anywhere
    const it = extractOne(raw);
    return it;
  }
  return best;
}

const margin = {top: 40, right: 20, bottom: 60, left: 74},
      outerW = 920, outerH = 580,
      width  = outerW - margin.left - margin.right,
      height = outerH - margin.top - margin.bottom;

const root = d3.select("svg.viz");
const svg = root.append("g").attr("transform", `translate(${margin.left},${margin.top})`);
const gridG = svg.append("g").attr("class","grid");
const xAxisG = svg.append("g").attr("class","axis").attr("transform", `translate(0,${height})`);
const yAxisG = svg.append("g").attr("class","axis");
const tooltip = d3.select("body").append("div").attr("class","tooltip").style("opacity",0);

d3.csv(CSV_FILE).then(raw => {
  const rows = raw.map(d => {
    const pick = pickSigmaAtRT(d[COL.sigmaTemp]);
    const log10_sigma = (Number.isFinite(pick.sigma) && pick.sigma > 0) ? Math.log10(pick.sigma) : NaN;
    return {
      Formula: (d[COL.formula] || "").trim(),
      StructureGroup: normLabel(d[COL.struct]),
      IonType: normLabel(d[COL.ion]),
      Ea_eV: parseNumberFlexible(d[COL.ea]),
      sigma: pick.sigma,
      tempC: pick.temp,
      log10_sigma,
      sigmaRaw: pick.raw
    };
  });

  const allData = rows.filter(d => Number.isFinite(d.Ea_eV) && Number.isFinite(d.log10_sigma));

  const structureGroups = [...new Set(allData.map(d => d.StructureGroup).filter(Boolean))];
  const ionTypes = [...new Set(allData.map(d => d.IonType).filter(Boolean))];

  const status = document.getElementById("status");
  status.textContent = `loaded: ${raw.length}, parsed: ${allData.length}`;
  document.getElementById("footnote").textContent = "Y = log10(σ) computed from Conductivity/Temp; prefers ~25°C entry.";

  if (!allData.length) {
    svg.append("text").attr("class","empty").attr("x", width/2).attr("y", height/2).text("No parsable values.");
    return;
  }

  const x = d3.scaleLinear().domain(d3.extent(allData, d => d.Ea_eV)).nice().range([0, width]);
  const y = d3.scaleLinear().domain(d3.extent(allData, d => d.log10_sigma)).nice().range([height, 0]);
  const color = d3.scaleOrdinal(d3.schemeTableau10).domain(structureGroups);
  const shapes = [d3.symbolCircle, d3.symbolSquare, d3.symbolTriangle, d3.symbolDiamond, d3.symbolCross, d3.symbolStar, d3.symbolWye];
  const shape = t => shapes[(Math.max(0, ionTypes.indexOf(t))) % shapes.length];

  // Axes + grid
  xAxisG.call(d3.axisBottom(x));
  yAxisG.call(d3.axisLeft(y));
  gridG.append("g").attr("transform", `translate(0,${height})`).call(d3.axisBottom(x).tickSize(-height).tickFormat(""));
  gridG.append("g").call(d3.axisLeft(y).tickSize(-width).tickFormat(""));
  svg.append("text").attr("x", width/2).attr("y", height + 46).attr("text-anchor","middle").attr("fill","#0f172a").attr("font-size",13).text("Activation Energy Ea (eV)");
  svg.append("text").attr("transform","rotate(-90)").attr("x", -height/2).attr("y", -54).attr("text-anchor","middle").attr("fill","#0f172a").attr("font-size",13).text("log₁₀(Conductivity σ) (S·cm⁻¹)");

  const points = svg.selectAll(".point").data(allData).enter().append("path")
    .attr("class","point")
    .attr("transform", d => `translate(${x(d.Ea_eV)},${y(d.log10_sigma)})`)
    .attr("d", d3.symbol().type(d => shape(d.IonType)).size(110)())
    .attr("fill", d => color(d.StructureGroup) || "#94a3b8")
    .attr("stroke","#0f172a").attr("stroke-width",0.6).attr("opacity",0.92)
    .on("mouseover", (event, d) => {
      const sigmaStr = Number.isFinite(d.sigma) ? d.sigma.toExponential(3) : "—";
      tooltip.style("opacity", 1).html(
        `<div><b>${d.Formula || "—"}</b></div>
         <div>Structure: ${d.StructureGroup || "—"}</div>
         <div>Ion: ${d.IonType || "—"}</div>
         <div>Ea: ${d.Ea_eV.toFixed(3)} eV</div>
         <div>σ: ${sigmaStr} S·cm⁻¹ ${Number.isFinite(d.tempC)?`@ ${d.tempC}°C`:""}</div>
         <div>log₁₀σ: ${d.log10_sigma.toFixed(3)}</div>`);
    })
    .on("mousemove", (event) => { tooltip.style("left",(event.clientX+14)+"px").style("top",(event.clientY+14)+"px"); })
    .on("mouseout", () => tooltip.style("opacity", 0));

  // Filters
  const eaCheckbox = document.getElementById("eaFilter");
  let activeStructures = new Set(structureGroups);
  let activeIons = new Set(ionTypes);

  function updateVisibility(){
    let visibleCount = 0;
    points.style("display", d => {
      const passEa = !eaCheckbox.checked || d.Ea_eV <= 1;
      const passStruct = activeStructures.has(d.StructureGroup);
      const passIon = activeIons.has(d.IonType);
      const show = passEa && passStruct && passIon;
      if (show) visibleCount++;
      return show ? null : "none";
    });
    status.textContent = `loaded: ${raw.length}, parsed: ${allData.length}, showing: ${visibleCount}`;
  }

  // Legends
  const colorItems = d3.select("#colorItems");
  structureGroups.forEach(s => {
    const item = colorItems.append("div").attr("class","legend-item");
    const sym = item.append("svg").attr("class","legend-symbol");
    sym.append("rect").attr("x",2).attr("y",2).attr("width",14).attr("height",14).attr("fill", color(s)).attr("stroke","#1f2937").attr("stroke-width",0.6);
    item.append("span").text(s || "—");
    item.on("click", () => { if (activeStructures.has(s)) activeStructures.delete(s); else activeStructures.add(s); item.classed("disabled", !activeStructures.has(s)); updateVisibility(); });
  });

  const shapeItems = d3.select("#shapeItems");
  ionTypes.forEach(t => {
    const item = shapeItems.append("div").attr("class","legend-item");
    const symSvg = item.append("svg").attr("class","legend-symbol").attr("viewBox","-10 -10 20 20");
    symSvg.append("path").attr("d", d3.symbol().type(shape(t)).size(120)()).attr("fill","#475569").attr("stroke","#1f2937").attr("stroke-width",0.6);
    item.append("span").text(t || "—");
    item.on("click", () => { if (activeIons.has(t)) activeIons.delete(t); else activeIons.add(t); item.classed("disabled", !activeIons.has(t)); updateVisibility(); });
  });

  document.getElementById("colorAll").addEventListener("click", ()=>{
    activeStructures = new Set(structureGroups);
    d3.select("#colorItems").selectAll(".legend-item").classed("disabled", false);
    updateVisibility();
  });
  document.getElementById("colorNone").addEventListener("click", ()=>{
    activeStructures.clear();
    d3.select("#colorItems").selectAll(".legend-item").classed("disabled", true);
    updateVisibility();
  });
  document.getElementById("shapeAll").addEventListener("click", ()=>{
    activeIons = new Set(ionTypes);
    d3.select("#shapeItems").selectAll(".legend-item").classed("disabled", false);
    updateVisibility();
  });
  document.getElementById("shapeNone").addEventListener("click", ()=>{
    activeIons.clear();
    d3.select("#shapeItems").selectAll(".legend-item").classed("disabled", true);
    updateVisibility();
  });

  document.getElementById("resetAll").addEventListener("click", ()=>{
    eaCheckbox.checked = true;
    activeStructures = new Set(structureGroups);
    activeIons = new Set(ionTypes);
    d3.select("#colorItems").selectAll(".legend-item").classed("disabled", false);
    d3.select("#shapeItems").selectAll(".legend-item").classed("disabled", false);
    updateVisibility();
  });

  eaCheckbox.addEventListener("change", updateVisibility);
  updateVisibility();
}).catch(err => {
  console.error(err);
  svg.append("text").attr("class","empty").attr("x", 450).attr("y", 280).text("Failed to load data.csv");
});
</script>
</body>
</html>
